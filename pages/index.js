import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useState, useEffect } from 'react';
import abi from '../abi/addWordABI.json';
import { ethers } from 'ethers';

export default function Home() {
	const [currentAccount, setCurrentAccount] = useState('');
	const [phrase, setPhrase] = useState('');
	const [message, setMessage] = useState('');
	const [allPostedPhrases, setAllPostedPhrases] = useState([]);

	const contractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';

	// Wallet connection logic
	const isWalletConnected = async () => {
		try {
			const { ethereum } = window;

			const accounts = await ethereum.request({ method: 'eth_accounts' });

			if (accounts.length > 0) {
				const account = accounts[0];

				setCurrentAccount(account);

				console.log('wallet is connected! ' + account);
			} else {
				setCurrentAccount('');
				console.log('make sure MetaMask is connected');
			}
		} catch (error) {
			console.log('error: ', error);
		}
	};

	const connectWallet = async () => {
		try {
			const { ethereum } = window;

			if (!ethereum) {
				console.log('please install MetaMask');
			}

			const accounts = await ethereum.request({
				method: 'eth_requestAccounts',
			});

			setCurrentAccount(accounts[0]);
		} catch (error) {
			console.log(error);
		}
	};

	const addWord = async () => {
		try {
			const { ethereum } = window;

			if (ethereum) {
				const provider = new ethers.providers.Web3Provider(ethereum, 'any');
				const signer = provider.getSigner();
				const AddWordContract = new ethers.Contract(
					contractAddress,
					abi,
					signer
				);

				console.log('adding word..');
				const wordTxn = await AddWordContract.addWord(phrase, message);

				await wordTxn.wait();

				console.log('mined ', wordTxn.hash);

				// Clear the form fields.
				setPhrase('');
				setMessage('');
			}
		} catch (error) {
			console.log(error);
		}
	};

	const getAllPhrases = async () => {
		try {
			const { ethereum } = window;

			if (ethereum) {
				const provider = new ethers.providers.Web3Provider(ethereum, 'any');

				const AddWordContract = new ethers.Contract(
					contractAddress,
					abi,
					provider
				);

				const allPhrases = await AddWordContract.getWordsArray();
				setAllPostedPhrases(allPhrases);
			}
		} catch (error) {
			console.log(error);
		}
	};

  //* set up event listener for contract
	const listenToEvent = () => {
		const { ethereum } = window;

		try {
			if (ethereum) {
				const provider = new ethers.providers.Web3Provider(ethereum, 'any');

				const AddWordContract = new ethers.Contract(
					contractAddress,
					abi,
					provider
				);

				AddWordContract.on('WordAdded', (_user, _addedWord, _message) => {
					let info = {
						user: _user,
						addedWord: _addedWord,
						message: _message,
					};

          setAllPostedPhrases(prev => [...prev, info.addedWord])

					console.log('latest event: ', JSON.stringify(info));
				});

				console.log('listening to events');
			} else {
				console.log('you need to connect metamask');
			}
		} catch (error) {
			console.log(error);
		}
	};

	const onPhraseChange = e => setPhrase(e.target.value);
	const onMessageChange = e => setMessage(e.target.value);

	useEffect(() => {
		isWalletConnected();
	}, [currentAccount]);

	return (
		<div className={styles.container}>
			<Head>
				<title>Quick Dapp Practice</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className={styles.main}>
				<h1>Hey</h1>
				<button onClick={() => connectWallet()}>Connect Wallet</button>

				{currentAccount && (
					<>
						<p>Add a word to the blockchain!</p>
						<label>
							phrase{' '}
							<input type='text' onChange={onPhraseChange} value={phrase} />
						</label>
						<br />
						<label>
							message{' '}
							<input type='text' onChange={onMessageChange} value={message} />
						</label>
						<br />
						<button onClick={addWord}>Add phrase & message!</button>
						<br />
						<button onClick={getAllPhrases}>Show all posted phrases</button>
						{allPostedPhrases.length > 0 && (
							<>
								<br />
								<button onClick={listenToEvent}>listen for events</button>
								<ul>
									{allPostedPhrases.map((p, index) => (
										<li key={index}>{p}</li>
									))}
								</ul>
							</>
						)}
					</>
				)}
			</main>

			<footer className={styles.footer}>
				<a
					href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
					target='_blank'
					rel='noopener noreferrer'
				>
					Powered by{' '}
					<span className={styles.logo}>
						<Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
					</span>
				</a>
			</footer>
		</div>
	);
}
